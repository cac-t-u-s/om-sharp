
(:patch
 (:name "button")
 (:doc "")
 (:info
  (:created "2020/06/30 13:35:53")
  (:modified "2021/12/06 23:31:53")
  (:by "om-sharp")
  (:version 1.05))
 (:window (:size (929 755)) (:position (501 52)))
 (:grid nil)
 (:lock t)
 (:boxes
  (:comment
   (:x 62)
   (:y 27)
   (:w 100)
   (:h 30)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border (:number-or-nil (:number 0.0) (:t-or-nil t)))
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Calibri") (:size 18) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text "BUTTON")
   (:id 0))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:name "advanced usage")
     (:doc "")
     (:info
      (:created nil)
      (:modified nil)
      (:by *app-name*)
      (:version 0))
     (:window (:size (990 962)) (:position (538 47)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :interface)
       (:reference button)
       (:group-id nil)
       (:name "button")
       (:x 134)
       (:y 353)
       (:w 193)
       (:h 40)
       (:color
        (:color-or-nil
         (:color
          (:color
           0.4067920446395874D0
           0.6176778078079224D0
           0.9248780012130737D0
           0.44313726))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:send-value (:list 900 1100 300))
       (:text "change interval sizes")
       (:inputs
        (:input
         (:type :key)
         (:name "send-value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "value") (:reactive t)))
       (:value nil)
       (:id 0))
      (:box
       (:type :function)
       (:reference om-random)
       (:group-id nil)
       (:name "om-random")
       (:x 136)
       (:y 214)
       (:w 104)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LOW")
         (:value 1)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HIGH")
         (:value 11)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:type :special)
       (:reference repeat-n)
       (:group-id nil)
       (:name "repeat-n")
       (:x 164)
       (:y 273)
       (:w 95)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :left)
       (:reactive nil)
       (:lock nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "self")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "num")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "collected results") (:reactive nil)))
       (:id 2))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 298)
       (:y 195)
       (:w 32)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 3)
       (:id 3))
      (:box
       (:type :interface)
       (:reference button)
       (:group-id nil)
       (:name "button")
       (:x 399)
       (:y 393)
       (:w 175)
       (:h 39)
       (:color
        (:color-or-nil
         (:color
          (:color
           0.4067920446395874D0
           0.6176778078079224D0
           0.9248780012130737D0
           0.45490196))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:send-value (:list 0 2 1 2 1 1 0 2 2 2 0 0 1 0 2 1 1 1 0 1))
       (:text "change sequence")
       (:inputs
        (:input
         (:type :key)
         (:name "send-value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "value") (:reactive t)))
       (:value nil)
       (:id 4))
      (:box
       (:type :function)
       (:reference om-random)
       (:group-id nil)
       (:name "om-random")
       (:x 389)
       (:y 312)
       (:w 104)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LOW")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HIGH")
         (:value 11)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:type :special)
       (:reference repeat-n)
       (:group-id nil)
       (:name "repeat-n")
       (:x 391)
       (:y 344)
       (:w 201)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :left)
       (:reactive nil)
       (:lock nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "self")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "num")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "collected results") (:reactive nil)))
       (:id 6))
      (:box
       (:type :function)
       (:reference 1-)
       (:group-id nil)
       (:name "1-")
       (:x 439)
       (:y 278)
       (:w 51)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 661)
       (:y 268)
       (:w 32)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 20)
       (:id 8))
      (:box
       (:type :interface)
       (:reference button)
       (:group-id nil)
       (:name "button")
       (:x 713)
       (:y 433)
       (:w 189)
       (:h 41)
       (:color
        (:color-or-nil
         (:color
          (:color
           0.4067920446395874D0
           0.6176778078079224D0
           0.9248780012130737D0
           0.44705883))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:send-value
        (:list 0 0 0 -1 -1 0 1 1 0 0 0 0 0 -1 -1 0 0 -1 0 1))
       (:text "change direction sequence")
       (:inputs
        (:input
         (:type :key)
         (:name "send-value")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "value") (:reactive t)))
       (:value nil)
       (:id 9))
      (:box
       (:type :function)
       (:reference om-random)
       (:group-id nil)
       (:name "om-random")
       (:x 709)
       (:y 341)
       (:w 104)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LOW")
         (:value -1)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "HIGH")
         (:value 1)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:type :special)
       (:reference repeat-n)
       (:group-id nil)
       (:name "repeat-n")
       (:x 711)
       (:y 386)
       (:w 201)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :left)
       (:reactive nil)
       (:lock nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "self")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "num")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "collected results") (:reactive nil)))
       (:id 11))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 721)
       (:y 311)
       (:w 32)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value -1)
       (:id 12))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 769)
       (:y 311)
       (:w 32)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 1)
       (:id 13))
      (:box
       (:type :function)
       (:reference posn-match)
       (:group-id nil)
       (:name "posn-match")
       (:x 375)
       (:y 586)
       (:w 106)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value (:list 10 20 30 40 50 60 70 80 90))
         (:reactive t))
        (:input
         (:type :standard)
         (:name "POSITIONS")
         (:value (:list (:list 0 1) 4 (:list 6)))
         (:reactive t)))
       (:outputs (:output (:name "out") (:reactive t)))
       (:id 14))
      (:box
       (:type :function)
       (:reference om*)
       (:group-id nil)
       (:name "om*")
       (:x 178)
       (:y 312)
       (:w 104)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 100)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 15))
      (:box
       (:type :function)
       (:reference dx->x)
       (:group-id nil)
       (:name "dx->x")
       (:x 376)
       (:y 721)
       (:w 180)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "START")
         (:value 6000)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value (:list 1 1))
         (:reactive t)))
       (:outputs (:output (:name "out") (:reactive t)))
       (:id 16))
      (:box
       (:type :function)
       (:reference om*)
       (:group-id nil)
       (:name "om*")
       (:x 343)
       (:y 653)
       (:w 330)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive t))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive t)))
       (:outputs (:output (:name "out") (:reactive t)))
       (:id 17))
      (:box
       (:type :object)
       (:reference chord-seq)
       (:group-id nil)
       (:name nil)
       (:x 153)
       (:y 771)
       (:w 520)
       (:h 138)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :mini-view)
       (:showname nil)
       (:show-markers t)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LMIDIC")
         (:value (:list (:list 6000)))
         (:reactive t))
        (:input
         (:type :standard)
         (:name "LONSET")
         (:value (:list 0 1000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LDUR")
         (:value (:list (:list 1000)))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LVEL")
         (:value 100)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "LMIDIC") (:reactive nil))
        (:output (:name "LONSET") (:reactive nil))
        (:output (:name "LDUR") (:reactive nil))
        (:output (:name "LVEL") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:staff :gf) (:scale :scale-1/2))
       (:value
        (:object
         (:class chord-seq)
         (:slots
          ((:onset 0)
           (:duration 21000)
           (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
           (:name "CHORD-SEQ")
           (:symbolic-date nil)
           (:symbolic-dur nil)
           (:symbolic-dur-extent 0)
           (:extras nil)
           (:group-ids nil)
           (:lmidic
            (:list
             (:list 6000)
             (:list 6000)
             (:list 5400)
             (:list 5400)
             (:list 6000)
             (:list 6500)
             (:list 6500)
             (:list 7000)
             (:list 7000)
             (:list 6400)
             (:list 5900)
             (:list 6500)
             (:list 6500)
             (:list 6500)
             (:list 7400)
             (:list 6800)
             (:list 7700)
             (:list 8600)
             (:list 9500)
             (:list 9500)
             (:list 10000)))
           (:lonset
            (:list
             0
             1000
             2000
             3000
             4000
             5000
             6000
             7000
             8000
             9000
             10000
             11000
             12000
             13000
             14000
             15000
             16000
             17000
             18000
             19000
             20000
             21000))
           (:ldur (:list 1000))
           (:lvel (:list 100))
           (:loffset (:list 0))
           (:lchan (:list 1))
           (:lport (:list nil))
           (:llegato nil)))))
       (:id 18))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 131)
       (:y 495)
       (:w 153)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive t))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive t))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive t)))
       (:outputs (:output (:name "out") (:reactive t)))
       (:id 19))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 454)
       (:y 523)
       (:w 187)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive t))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive t))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive t)))
       (:outputs (:output (:name "out") (:reactive t)))
       (:id 20))
      (:box
       (:type :special)
       (:reference if)
       (:group-id nil)
       (:name "if")
       (:x 735)
       (:y 598)
       (:w 153)
       (:h 29)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:icon :left)
       (:lock nil)
       (:lambda nil)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive t))
        (:input
         (:type :standard)
         (:name "THEN")
         (:value nil)
         (:reactive t))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive t)))
       (:outputs (:output (:name "out") (:reactive t)))
       (:id 21))
      (:comment
       (:x 51)
       (:y 18)
       (:w 462)
       (:h 143)
       (:fgcolor nil)
       (:bgcolor nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font-or-nil
         (:font
          (:font (:face "Lucida Grande") (:size 12) (:style :plain)))
         (:t-or-nil t)))
       (:align nil)
       (:text
        "This is an experimental patch that explores how to exploit the fact that a button returns NIL when evaluated normally to use it as a kind of updater.

If you click a button, it will update the value stored in the accumulator (by default the accum-function just replaces the existing value with the new one). If you evaluate normally, it will retrieve the stored value.

Note that the 3 buttons have to be clicked at least once to get a result, since the stored values in the accum boxes don't persist when you close the patch.")
       (:id 22))
      (:box
       (:type :special)
       (:reference accum)
       (:group-id nil)
       (:name "accum")
       (:x 217)
       (:y 425)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "accum-function")
         (:value substitute-value)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 23))
      (:box
       (:type :special)
       (:reference accum)
       (:group-id nil)
       (:name "accum")
       (:x 568)
       (:y 453)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "accum-function")
         (:value substitute-value)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 24))
      (:box
       (:type :special)
       (:reference accum)
       (:group-id nil)
       (:name "accum")
       (:x 794)
       (:y 511)
       (:w 60)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.7 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:reactive nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "data-in")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "accum-function")
         (:value substitute-value)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "init")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "collect") (:reactive nil))
        (:output (:name "data-out") (:reactive nil))
        (:output (:name "init") (:reactive nil)))
       (:id 25))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "value box")
       (:x 401)
       (:y 686)
       (:w 46)
       (:h 34)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:reactive nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 6000)
       (:id 26)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 19 :in 0))
       (:attributes (:color nil :style nil :modif (0 -2/7))))
      (:connection (:from (:box 0 :out 0)) (:to (:box 23 :in 0)))
      (:connection (:from (:box 1 :out 0)) (:to (:box 2 :in 0)))
      (:connection (:from (:box 2 :out 0)) (:to (:box 15 :in 0)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 1)))
      (:connection (:from (:box 3 :out 0)) (:to (:box 7 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 20 :in 0)))
      (:connection (:from (:box 4 :out 0)) (:to (:box 24 :in 0)))
      (:connection (:from (:box 5 :out 0)) (:to (:box 6 :in 0)))
      (:connection (:from (:box 6 :out 0)) (:to (:box 4 :in 0)))
      (:connection (:from (:box 7 :out 0)) (:to (:box 5 :in 1)))
      (:connection (:from (:box 8 :out 0)) (:to (:box 6 :in 1)))
      (:connection
       (:from (:box 8 :out 0))
       (:to (:box 11 :in 1))
       (:attributes (:color nil :style nil :modif (0 -100/251))))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 21 :in 0))
       (:attributes (:color nil :style nil :modif (0 -1/3))))
      (:connection (:from (:box 9 :out 0)) (:to (:box 25 :in 0)))
      (:connection (:from (:box 10 :out 0)) (:to (:box 11 :in 0)))
      (:connection (:from (:box 11 :out 0)) (:to (:box 9 :in 0)))
      (:connection (:from (:box 12 :out 0)) (:to (:box 10 :in 0)))
      (:connection (:from (:box 13 :out 0)) (:to (:box 10 :in 1)))
      (:connection (:from (:box 14 :out 0)) (:to (:box 17 :in 0)))
      (:connection (:from (:box 15 :out 0)) (:to (:box 0 :in 0)))
      (:connection (:from (:box 16 :out 0)) (:to (:box 18 :in 1)))
      (:connection (:from (:box 17 :out 0)) (:to (:box 16 :in 1)))
      (:connection (:from (:box 19 :out 0)) (:to (:box 14 :in 0)))
      (:connection (:from (:box 20 :out 0)) (:to (:box 14 :in 1)))
      (:connection (:from (:box 21 :out 0)) (:to (:box 17 :in 1)))
      (:connection (:from (:box 23 :out 0)) (:to (:box 19 :in 1)))
      (:connection (:from (:box 23 :out 1)) (:to (:box 19 :in 2)))
      (:connection (:from (:box 24 :out 0)) (:to (:box 20 :in 1)))
      (:connection (:from (:box 24 :out 1)) (:to (:box 20 :in 2)))
      (:connection (:from (:box 25 :out 0)) (:to (:box 21 :in 1)))
      (:connection (:from (:box 25 :out 1)) (:to (:box 21 :in 2)))
      (:connection (:from (:box 26 :out 0)) (:to (:box 16 :in 0))))))
   (:group-id nil)
   (:name "advanced usage")
   (:x 664)
   (:y 517)
   (:w 155)
   (:h 148)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs)
   (:id 1))
  (:box
   (:type :interface)
   (:reference button)
   (:group-id nil)
   (:name "button")
   (:x 217)
   (:y 157)
   (:w 102)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:send-value t)
   (:text "Hello World")
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value nil)
   (:id 2))
  (:box
   (:type :function)
   (:reference print)
   (:group-id nil)
   (:name "print")
   (:x 230)
   (:y 202)
   (:w 76)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SOMETHING")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 3))
  (:comment
   (:x 62)
   (:y 74)
   (:w 344)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Lucida Grande") (:size 12) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "In reactive mode, a button sends a value (by default, T) when CMD-clicked (or simply clicked if patch is locked).")
   (:id 4))
  (:comment
   (:x 59)
   (:y 256)
   (:w 347)
   (:h 23)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Lucida Grande") (:size 12) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text "If evaluated in the standard manner, a button returns T.")
   (:id 5))
  (:box
   (:type :special)
   (:reference collect)
   (:group-id nil)
   (:name "collect")
   (:x 74)
   (:y 612)
   (:w 275)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "data-in")
     (:value nil)
     (:reactive t))
    (:input (:type :standard) (:name "push") (:value t) (:reactive t))
    (:input
     (:type :standard)
     (:name "init")
     (:value nil)
     (:reactive t)))
   (:outputs
    (:output (:name "collect") (:reactive t))
    (:output (:name "data-out") (:reactive t))
    (:output (:name "init") (:reactive t)))
   (:id 6))
  (:box
   (:type :interface)
   (:reference button)
   (:group-id nil)
   (:name "button")
   (:x 73)
   (:y 480)
   (:w 100)
   (:h 39)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:send-value 8)
   (:text "Add a number")
   (:inputs
    (:input
     (:type :key)
     (:name "send-value")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "value") (:reactive t)))
   (:value nil)
   (:id 7))
  (:comment
   (:x 58)
   (:y 344)
   (:w 223)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Lucida Grande") (:size 12) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "The send-value can be set in the info pane, or using a keyword input.")
   (:id 8))
  (:box
   (:type :function)
   (:reference om-random)
   (:group-id nil)
   (:name "om-random")
   (:x 71)
   (:y 432)
   (:w 104)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "LOW") (:value 0) (:reactive t))
    (:input
     (:type :standard)
     (:name "HIGH")
     (:value 10)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 9))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 83)
   (:y 397)
   (:w 32)
   (:h 34)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0)
   (:id 10))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 131)
   (:y 397)
   (:w 32)
   (:h 34)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 10)
   (:id 11))
  (:box
   (:type :function)
   (:reference seq)
   (:group-id nil)
   (:name "seq")
   (:x 95)
   (:y 530)
   (:w 113)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "OP") (:value nil) (:reactive t))
    (:input
     (:type :optional)
     (:name "op+")
     (:value nil)
     (:reactive t)))
   (:outputs
    (:output (:name "out") (:reactive t))
    (:output (:name "op+1") (:reactive t)))
   (:id 12))
  (:box
   (:type :interface)
   (:reference button)
   (:group-id nil)
   (:name "button")
   (:x 254)
   (:y 498)
   (:w 93)
   (:h 36)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:send-value t)
   (:text "reset")
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value nil)
   (:id 13))
  (:box
   (:type :value)
   (:reference null)
   (:group-id nil)
   (:name "value box")
   (:x 108)
   (:y 679)
   (:w 207)
   (:h 34)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs
    (:input (:type :optional) (:name "in") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value nil)
   (:id 14))
  (:box
   (:type :special)
   (:reference or)
   (:group-id nil)
   (:name "or")
   (:x 192)
   (:y 575)
   (:w 50)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "test-forms")
     (:value nil)
     (:reactive t))
    (:input
     (:type :optional)
     (:name "test-forms")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 15))
  (:comment
   (:x 358)
   (:y 615)
   (:w 225)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Lucida Grande") (:size 12) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "Use buttons to interactively generate a series of random number.")
   (:id 16)))
 (:connections
  (:connection (:from (:box 2 :out 0)) (:to (:box 3 :in 0)))
  (:connection (:from (:box 6 :out 1)) (:to (:box 14 :in 0)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 10 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 9 :in 1)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 12 :out 1)) (:to (:box 15 :in 0)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 6 :in 2)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 15 :in 1)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 6 :in 1)))))