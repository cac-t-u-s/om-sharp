
(:patch
 (:name "mem")
 (:doc "")
 (:info
  (:created "2018/04/04 15:15:06")
  (:modified "2020/08/02 15:48:42")
  (:by "om-sharp")
  (:version 1.0))
 (:window (:size (923 706)) (:position (359 86)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :function)
   (:reference om-random)
   (:group-id nil)
   (:name "om-random")
   (:x 58)
   (:y 72)
   (:w 103)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "LOW") (:value 0) (:reactive nil))
    (:input
     (:type :standard)
     (:name "HIGH")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 99)
   (:y 203)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 97)
   (:id 1))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 156)
   (:y 198)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 57)
   (:id 2))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 81)
   (:y 240)
   (:w 116)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :optional) (:name "x") (:value nil) (:reactive nil))
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 3))
  (:box
   (:type :function)
   (:reference om-random)
   (:group-id nil)
   (:name "om-random")
   (:x 34)
   (:y 439)
   (:w 103)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "LOW") (:value 0) (:reactive nil))
    (:input
     (:type :standard)
     (:name "HIGH")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 4))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 123)
   (:y 476)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 4)
   (:id 5))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 75)
   (:y 572)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input (:type :optional) (:name "in") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 32)
   (:id 6))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 123)
   (:y 572)
   (:w 109)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input (:type :optional) (:name "in") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 95 35 98 97))
   (:id 7))
  (:comment
   (:x 58)
   (:y 8)
   (:w 388)
   (:h 41)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border (:number-or-nil (:number 0.0) (:t-or-nil t)))
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Verdana") (:size 14) (:style :bold)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "MEM: a box with \"memory\" which keeps track of results from previous evaluations")
   (:id 8))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 99)
   (:y 108)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 97)
   (:id 9))
  (:comment
   (:x 66)
   (:y 289)
   (:w 181)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Left outlet = current value
Right outlet = previous value")
   (:id 10))
  (:box
   (:type :function)
   (:reference om-random)
   (:group-id nil)
   (:name "om-random")
   (:x 285)
   (:y 70)
   (:w 103)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "LOW") (:value 0) (:reactive nil))
    (:input
     (:type :standard)
     (:name "HIGH")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 306)
   (:y 196)
   (:w 32)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 95)
   (:id 12))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 351)
   (:y 195)
   (:w 74)
   (:h 29)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 59 0 81))
   (:id 13))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 308)
   (:y 238)
   (:w 116)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :optional) (:name "x") (:value nil) (:reactive nil))
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 326)
   (:y 105)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 95)
   (:id 15))
  (:comment
   (:x 308)
   (:y 289)
   (:w 237)
   (:h 38)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Left outlet = current value
Right outlet = list of N previous values")
   (:id 16))
  (:comment
   (:x 428)
   (:y 112)
   (:w 154)
   (:h 70)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Right inlet = size of the memory. If non-NIL, the memory will be  list of <n> previous values.")
   (:id 17))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 386)
   (:y 105)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 3)
   (:id 18))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 75)
   (:y 476)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input (:type :optional) (:name "in") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive t)))
   (:value 32)
   (:id 19))
  (:comment
   (:x 13)
   (:y 391)
   (:w 206)
   (:h 40)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "... also works in reactive mode: evaluate the 'om-random' box")
   (:id 20))
  (:box
   (:type :interface)
   (:reference slider)
   (:group-id nil)
   (:name "slider")
   (:x 420)
   (:y 365)
   (:w 37)
   (:h 70)
   (:color nil)
   (:border (:number-or-nil (:number 1.5) (:t-or-nil t)))
   (:roundness (:number-or-nil (:number 6) (:t-or-nil t)))
   (:min-value 0)
   (:max-value 100)
   (:increment 1)
   (:decimals 0)
   (:orientation :vertical)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive t)))
   (:value 57)
   (:id 21))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 389)
   (:y 528)
   (:w 186)
   (:h 57)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input (:type :optional) (:name "in") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive t)))
   (:value
    (:list
     57
     56
     54
     46
     50
     51
     61
     63
     70
     71
     73
     59
     56
     34
     36
     43
     44
     46
     61
     64
     71
     69
     67
     61
     30
     29
     11
     20
     21
     34
     36))
   (:id 22))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 473)
   (:y 405)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 30)
   (:id 23))
  (:box
   (:type :object)
   (:reference bpf)
   (:group-id nil)
   (:name nil)
   (:x 294)
   (:y 1185/2)
   (:w 239)
   (:h 72)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "X-POINTS")
     (:value (:list 0 2000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y-POINTS")
     (:value (:list 0 100))
     (:reactive t)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "X-POINTS") (:reactive nil))
    (:output (:name "Y-POINTS") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class bpf)
     (:slots
      ((:onset 0)
       (:duration 60000.0)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:action nil)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:decimals 2)
       (:x-points
        (:list
         0.0
         2000.0
         4000.0
         6000.0
         8000.0
         10000.0
         12000.0
         14000.0
         16000.0
         18000.0
         20000.0
         22000.0
         24000.0
         26000.0
         28000.0
         30000.0
         32000.0
         34000.0
         36000.0
         38000.0
         40000.0
         42000.0
         44000.0
         46000.0
         48000.0
         50000.0
         52000.0
         54000.0
         56000.0
         58000.0
         60000.0))
       (:y-points
        (:list
         57.0
         56.0
         54.0
         46.0
         50.0
         51.0
         61.0
         63.0
         70.0
         71.0
         73.0
         59.0
         56.0
         34.0
         36.0
         43.0
         44.0
         46.0
         61.0
         64.0
         71.0
         69.0
         67.0
         61.0
         30.0
         29.0
         11.0
         20.0
         21.0
         34.0
         36.0))))
     (:add-slots ((:name nil)))))
   (:id 24))
  (:comment
   (:x 711)
   (:y 359)
   (:w 133)
   (:h 48)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "if size is a float, then it represents a TIME WINDOW (in seconds)")
   (:id 25))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 704)
   (:y 538)
   (:w 149)
   (:h 51)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs
    (:input (:type :optional) (:name "in") (:value nil) (:reactive t)))
   (:outputs (:output (:name "value") (:reactive t)))
   (:value (:list 57 57 56 54 46 50 51))
   (:id 26))
  (:box
   (:type :value)
   (:reference single-float)
   (:group-id nil)
   (:name "value box")
   (:x 759)
   (:y 408)
   (:w 33)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1.0)
   (:id 27))
  (:box
   (:type :object)
   (:reference bpf)
   (:group-id nil)
   (:name nil)
   (:x 590)
   (:y 1185/2)
   (:w 239)
   (:h 72)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "X-POINTS")
     (:value (:list 0 2000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y-POINTS")
     (:value (:list 0 100))
     (:reactive t)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "X-POINTS") (:reactive nil))
    (:output (:name "Y-POINTS") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class bpf)
     (:slots
      ((:onset 0)
       (:duration 12000.0)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:action nil)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:decimals 2)
       (:x-points
        (:list 0.0 2000.0 4000.0 6000.0 8000.0 10000.0 12000.0))
       (:y-points (:list 57.0 57.0 56.0 54.0 46.0 50.0 51.0))))
     (:add-slots ((:name nil)))))
   (:id 28))
  (:comment
   (:x 592)
   (:y 26)
   (:w 243)
   (:h 54)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "See also: COLLECT/ACCUM -- some variants of MEM with conrol of memory initialization and state.")
   (:id 29))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 72)
   (:y 617)
   (:w 54)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :optional) (:name "x") (:value nil) (:reactive nil))
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 30))
  (:box
   (:type :special)
   (:reference mem)
   (:group-id nil)
   (:name "mem")
   (:x 95)
   (:y 149)
   (:w 51)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data to record in memory")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "size of memory")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "current value") (:reactive nil))
    (:output (:name "previous value(s)") (:reactive nil)))
   (:id 31))
  (:box
   (:type :special)
   (:reference mem)
   (:group-id nil)
   (:name "mem")
   (:x 322)
   (:y 144)
   (:w 51)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data to record in memory")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "size of memory")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "current value") (:reactive nil))
    (:output (:name "previous value(s)") (:reactive nil)))
   (:id 32))
  (:box
   (:type :special)
   (:reference mem)
   (:group-id nil)
   (:name "mem")
   (:x 71)
   (:y 516)
   (:w 51)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data to record in memory")
     (:value nil)
     (:reactive t))
    (:input
     (:type :standard)
     (:name "size of memory")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "current value") (:reactive t))
    (:output (:name "previous value(s)") (:reactive t)))
   (:id 33))
  (:box
   (:type :special)
   (:reference mem)
   (:group-id nil)
   (:name "mem")
   (:x 453)
   (:y 449)
   (:w 51)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data to record in memory")
     (:value nil)
     (:reactive t))
    (:input
     (:type :standard)
     (:name "size of memory")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "current value") (:reactive t))
    (:output (:name "previous value(s)") (:reactive t)))
   (:id 34))
  (:box
   (:type :function)
   (:reference cons)
   (:group-id nil)
   (:name "cons")
   (:x 450)
   (:y 497)
   (:w 63)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "CAR") (:value nil) (:reactive t))
    (:input
     (:type :standard)
     (:name "CDR")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 35))
  (:box
   (:type :special)
   (:reference mem)
   (:group-id nil)
   (:name "mem")
   (:x 676)
   (:y 447)
   (:w 51)
   (:h 42)
   (:color
    (:color-or-nil (:color (:color 0.82 0.7 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :top)
   (:inputs
    (:input
     (:type :standard)
     (:name "data to record in memory")
     (:value nil)
     (:reactive t))
    (:input
     (:type :standard)
     (:name "size of memory")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "current value") (:reactive t))
    (:output (:name "previous value(s)") (:reactive t)))
   (:id 36))
  (:box
   (:type :function)
   (:reference cons)
   (:group-id nil)
   (:name "cons")
   (:x 673)
   (:y 496)
   (:w 63)
   (:h 29)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "CAR") (:value nil) (:reactive t))
    (:input
     (:type :standard)
     (:name "CDR")
     (:value nil)
     (:reactive t)))
   (:outputs (:output (:name "out") (:reactive t)))
   (:id 37))
  (:comment
   (:x 464)
   (:y 366)
   (:w 80)
   (:h 23)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "<= SLIDER")
   (:id 38)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 9 :in 0)))
  (:connection (:from (:box 1 :out 0)) (:to (:box 3 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 3 :in 1)))
  (:connection (:from (:box 4 :out 0)) (:to (:box 19 :in 0)))
  (:connection (:from (:box 5 :out 0)) (:to (:box 33 :in 1)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 30 :in 0)))
  (:connection (:from (:box 7 :out 0)) (:to (:box 30 :in 1)))
  (:connection (:from (:box 9 :out 0)) (:to (:box 31 :in 0)))
  (:connection (:from (:box 11 :out 0)) (:to (:box 15 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 14 :in 0)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 14 :in 1)))
  (:connection (:from (:box 15 :out 0)) (:to (:box 32 :in 0)))
  (:connection (:from (:box 18 :out 0)) (:to (:box 32 :in 1)))
  (:connection (:from (:box 19 :out 0)) (:to (:box 33 :in 0)))
  (:connection (:from (:box 21 :out 0)) (:to (:box 34 :in 0)))
  (:connection (:from (:box 21 :out 0)) (:to (:box 36 :in 0)))
  (:connection (:from (:box 22 :out 0)) (:to (:box 24 :in 2)))
  (:connection (:from (:box 23 :out 0)) (:to (:box 34 :in 1)))
  (:connection (:from (:box 26 :out 0)) (:to (:box 28 :in 2)))
  (:connection (:from (:box 27 :out 0)) (:to (:box 36 :in 1)))
  (:connection (:from (:box 31 :out 0)) (:to (:box 1 :in 0)))
  (:connection (:from (:box 31 :out 1)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 32 :out 0)) (:to (:box 12 :in 0)))
  (:connection (:from (:box 32 :out 1)) (:to (:box 13 :in 0)))
  (:connection (:from (:box 33 :out 0)) (:to (:box 6 :in 0)))
  (:connection (:from (:box 33 :out 1)) (:to (:box 7 :in 0)))
  (:connection (:from (:box 34 :out 0)) (:to (:box 35 :in 0)))
  (:connection (:from (:box 34 :out 1)) (:to (:box 35 :in 1)))
  (:connection (:from (:box 35 :out 0)) (:to (:box 22 :in 0)))
  (:connection (:from (:box 36 :out 0)) (:to (:box 37 :in 0)))
  (:connection (:from (:box 36 :out 1)) (:to (:box 37 :in 1)))
  (:connection (:from (:box 37 :out 0)) (:to (:box 26 :in 0)))))